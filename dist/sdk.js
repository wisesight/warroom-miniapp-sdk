function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}let Warroom=/*#__PURE__*/function(){function a(){_classCallCheck(this,a),this.appType="",this.token="",this.isReady=!1,this.appId="",this.urlParams=new URLSearchParams(window.location.search),this.mode=this.urlParams.get("mode"),this.verifyUrl=""}return _createClass(a,[{key:"postMessageToParent",value:function postMessageToParent(a,b){if(""===this.token)throw Error("Authentication is not valid please init app before use");else parent.postMessage({"warroom-miniapp-type":this.appType,event:a,payload:b,token:this.token,appId:this.appId},"*")}},{key:"sleep",value:function sleep(a){return new Promise(b=>setTimeout(b,a))}},{key:"handleMessageFromWarroom",value:function handleMessageFromWarroom(a){if("warroom"===a.data.provider){if((a.data.token!==this.token||""===this.token)&&"response-to:status:init"!==a.data.event)throw Error("Authentication is not valid please init app before use");else{const b=a.data.event.replace("response-to","warroom-miniapp");document.dispatchEvent(new CustomEvent(b,{detail:a.data.payload}))}"production"!==this.mode&&console.info("[MINI APP]",a.data)}}},{key:"init",value:async function init({appType:a,appId:b}){window.addEventListener("message",this.handleMessageFromWarroom.bind(this)),this.appType=a;const c=this.urlParams.get("token");if("production"===this.mode){const a=await fetch(this.verifyUrl,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({token:this.token,appId:b})});200===a.status&&(this.appId=b,this.token=c)}return"devtool"===this.mode&&(await this.sleep(3e3),this.appId=b,this.token=c),this.postMessageToParent("status:init",new Date),new Promise(a=>{document.addEventListener("warroom-miniapp:status:init",()=>{this.isReady=!0,a(!0)})})}},{key:"isInMiniApp",value:function isInMiniApp(){return document.referrer.includes("warroom.wisewsight.com")&&isInIframe()}},{key:"isInIframe",value:function isInIframe(){try{return window.self!==window.top}catch(a){return!0}}},{key:"resize",value:function resize(a){this.postMessageToParent("control:resize",{size:a})}},{key:"getClientInformation",value:function getClientInformation(){return this.getMethodInterface("client-information")}},{key:"getSubject",value:function getSubject(){return this.getMethodInterface("subject")}},{key:"getCurrentAgent",value:function getCurrentAgent(){return this.getMethodInterface("current-agent")}},{key:"getCurrentThread",value:function getCurrentThread(){return this.getMethodInterface("current-thread")}},{key:"getCurrentCase",value:function getCurrentCase(){return this.getMethodInterface("current-case")}},{key:"getCurrentUser",value:function getCurrentUser(){return this.getMethodInterface("current-user")}},{key:"getUserCaseHistory",value:function getUserCaseHistory(a){return this.getMethodInterface("user-case-history",a)}},{key:"onCloseCase",value:function onCloseCase(a){this.eventMethodInterface("send:on-close-case",a)}},{key:"onNewCase",value:function onNewCase(a){this.eventMethodInterface("send:on-new-case",a)}},{key:"onAssignedCase",value:function onAssignedCase(a){this.eventMethodInterface("send:on-assigned-case",a)}},{key:"onReply",value:function onReply(a){this.eventMethodInterface("send:on-reply",a)}},{key:"onReplyFormChange",value:function onReplyFormChange(a){this.eventMethodInterface("send:on-form-change",a)}},{key:"onTagged",value:function onTagged(a){this.eventMethodInterface("send:on-tag-message",a)}},{key:"onFilterChanged",value:function onFilterChanged(a){this.eventMethodInterface("send:agent-filter-changed",a)}},{key:"onAgentStatusChanged",value:function onAgentStatusChanged(a){this.eventMethodInterface("send:agent-status-changed",a)}},{key:"onRefreshThread",value:function onRefreshThread(a){this.eventMethodInterface("send:agent-refresh-thread",a)}},{key:"onFocusPost",value:function onFocusPost(a){this.eventMethodInterface("send:on-focus-post",a)}},{key:"setReplyMessage",value:function setReplyMessage(a){this.postMessageToParent("send:set-reply-message",a)}},{key:"eventMethodInterface",value:function eventMethodInterface(a,b){document.addEventListener(`warroom-miniapp:${a}`,a=>{b(a.detail)},!1)}},{key:"getMethodInterface",value:function getMethodInterface(a,b){return this.postMessageToParent(`get:${a}`,b),new Promise(b=>{document.addEventListener(`warroom-miniapp:get:${a}`,a=>{b(a.detail)},!1)})}}]),a}();const warroom=new Warroom;